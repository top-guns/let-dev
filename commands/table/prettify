#!/usr/bin/env bash

COMMAND_DESCRIPTION="Draw nice looking ascii tables"

COMMAND_HELP='\
Use PrettyTable library to draw nice looking ascii tables 
with auto sizing columns to the screen.

Usage:
    :table:prettify [border_style] [header_color] col1 col2 ...

    Columns need to be delimited using a `\t` (Tab) character.

Arguments:
    col1            Name of column 1 in the table
    border_style    Border style. Available styles:
        --single
        --double
        --rounded
        --bold
        --middle
        --filled=<horizontal_border_symbol><vertical_border_symbol>
    header_color    Color of the header row. Available colors:
        blue
        green
        cyan
        red
        purple
        yellow
        gray
        light_blue
        light_green
        light_cyan
        light_red
        light_purple
        light_yellow
        light_gray

Example:
    {
        printf "PID\tUSER\tAPPNAME\n";
        printf "%s\t%s\t%s\n" 1 john "foo bar";
        printf "%s\t%s\t%s\n" 12345 someone_with_a_long_name "blub blib";
    } | :table:prettify green "PID" "USER" "APPNAME"
'

# Single borders

_char_top_left_single="┌"
_char_top_right_single="┐"
_char_top_center_single="┬"

_char_bottom_left_single="└"
_char_bottom_right_single="┘"
_char_bottom_center_single="┴"

_char_center_left_single="├"
_char_center_right_single="┤"
_char_center_center_single="┼"

_char_horizontal_single="─"
_char_vertical_single="│"

# Double borders

_char_top_left_double="╔"
_char_top_right_double="╗"
_char_top_center_double="╦"

_char_bottom_left_double="╚"
_char_bottom_right_double="╝"
_char_bottom_center_double="╩"

_char_center_left_double="╟"
_char_center_right_double="╢"
_char_center_center_double="╬"

_char_horizontal_double="═"
_char_vertical_double="║"

# # Filled borders

# _char_top_left_filled="█"
# _char_top_right_filled="█"
# _char_top_center_filled="█"

# _char_bottom_left_filled="█"
# _char_bottom_right_filled="█"
# _char_bottom_center_filled="█"

# _char_center_left_filled="█"
# _char_center_right_filled="█"
# _char_center_center_filled="█"

# _char_horizontal_filled="█"
# _char_vertical_filled="█"


# Bold borders

_char_top_left_bold="┏"
_char_top_right_bold="┓"
_char_top_center_bold="┳"

_char_bottom_left_bold="┗"
_char_bottom_right_bold="┛"
_char_bottom_center_bold="┻"

_char_center_left_bold="┣"
_char_center_right_bold="┫"
_char_center_center_bold="╋"

_char_horizontal_bold="━"
_char_vertical_bold="┃"


# Rounded borders

_char_top_left_rounded="╭"
_char_top_right_rounded="╮"
_char_top_center_rounded="┬"

_char_bottom_left_rounded="╰"
_char_bottom_right_rounded="╯"
_char_bottom_center_rounded="┴"

_char_center_left_rounded="├"
_char_center_right_rounded="┤"
_char_center_center_rounded="┼"

_char_horizontal_rounded="─"
_char_vertical_rounded="│"

# Middle borders

_char_top_left_middle="╒"
_char_top_right_middle="╕"
_char_top_center_middle="╤"

_char_bottom_left_middle="╘"
_char_bottom_right_middle="╛"
_char_bottom_center_middle="╧"

_char_center_left_middle="╞"
_char_center_right_middle="╡"
_char_center_center_middle="╪"

_char_horizontal_middle="═"
_char_vertical_middle="│"


# Escape codes

# Default colors
_color_blue="0;34"
_color_green="0;32"
_color_cyan="0;36"
_color_red="0;31"
_color_purple="0;35"
_color_yellow="0;33"
_color_gray="1;30"
_color_light_blue="1;34"
_color_light_green="1;32"
_color_light_cyan="1;36"
_color_light_red="1;31"
_color_light_purple="1;35"
_color_light_yellow="1;33"
_color_light_gray="0;37"
# Somewhat special colors
_color_black="0;30"
_color_white="1;37"
_color_none="0"

# Background colors
_bg_color_blue="44"
_bg_color_green="42"
_bg_color_cyan="46"
_bg_color_red="41"
_bg_color_purple="45"
_bg_color_yellow="43"
_bg_color_gray="40"
_bg_color_light_blue="104"
_bg_color_light_green="102"
_bg_color_light_cyan="106"
_bg_color_light_red="101"
_bg_color_light_purple="105"
_bg_color_light_yellow="103"
_bg_color_light_gray="47"
_bg_color_black="40"
_bg_color_white="107"
_bg_color_none="49"

# Text attributes
_attr_reset="0"
_attr_bold="1"
_attr_dim="2"
_attr_underlined="4"
_attr_blink="5"
_attr_reverse="7"
_attr_hidden="8"

# Colorize text
_colorize() {
    local color="$1"
    local bg_color="$2"
    local attr="$3"
    local text="$4"
    echo -e "\033[${attr:-0};${color:-0};${bg_color:-0}m${text}\033[0m"
}

_get_columns_count() {
    local line="$1"
    echo "$line" | awk -F'\t' '{print NF}'
}

_detect_shell() {
    if [ -n "$ZSH_VERSION" ]; then
        SHELL_TYPE="zsh"
        OFFSET=1
    else
        SHELL_TYPE="bash"
        OFFSET=0
    fi
}

_detect_shell

_get_columns() {
    local line="$1"
    local result_var="$2"
    local result=()
    while [[ $line ]]; do
        if [[ $line == *$'\t'* ]]; then
            result+=("${line%%$'\t'*}")
            line=${line#*$'\t'}
        else
            result+=("$line")
            break
        fi
    done
    eval "$result_var=(\"\${result[@]}\")"
}

_repeat_char() {
    local n="$1"
    local char="$2"
    for ((i=0; i<n; i++)); do
        echo -n "$char"
    done
}

_clear_value() {
    local value="$1"
    value=$(echo "$value" | sed -r 's/\x1B\[[0-9;]*[a-zA-Z]//g')
    echo "$value"
}

print_table() {
    local border_style="$1"
    shift

    local fill_symbol="$1"
    shift

    local column_count=0
    local column_widths=()
    local header=""
    for col in "$@"; do
        [ -z "$header" ] || header+=$'\t'
        header+="$col"
        column_count=$((column_count + 1))
        column_widths+=("${#col}")
    done

    local rows=()
    [ -z "$header" ] || rows+=("$header")

    while IFS= read -r line; do
        rows+=("$line")

        local cols=()
        _get_columns "$line" cols
        local cols_count="${#cols[@]}"
        if [ "$cols_count" -gt "$column_count" ]; then
            for ((i=0; i<column_count; i++)); do
                local index=$((i + OFFSET))
                local val=$(_clear_value "${cols[index]}")
                local width=${#val}
                local old_width=${column_widths[index]}
                if [ "$width" -gt "$old_width" ]; then
                    column_widths[index]=$width
                fi
            done

            for ((i=column_count; i<cols_count; i++)); do
                local index=$((i + OFFSET))
                local val=$(_clear_value "${cols[index]}")
                local width=${#val}
                column_widths+=("$width")
            done

            column_count=$cols_count
        else
            for ((i=0; i<cols_count; i++)); do
                local index=$((i + OFFSET))
                local val=$(_clear_value "${cols[index]}")
                local width=${#val}
                local old_width=${column_widths[index]}
                if [ "$width" -gt "$old_width" ]; then
                    column_widths[index]=$width
                fi
            done
        fi
    done

    print_separator() {
        local orient="$1"
        local border_style="$2"
        local fill_horizontal="$3"
        local fill_vertical="$4"

        local left_char_name="_char_${orient}_left_${border_style}"
        local right_char_name="_char_${orient}_right_${border_style}"
        local center_char_name="_char_${orient}_center_${border_style}"
        local horizontal_char_name="_char_horizontal_${border_style}"

        local left_char=$([ "$border_style" == "filled" ] && echo "$fill_horizontal" || eval echo \$${left_char_name})
        local right_char=$([ "$border_style" == "filled" ] && echo "$fill_horizontal" || eval echo \$${right_char_name})
        local center_char=$([ "$border_style" == "filled" ] && echo "$fill_horizontal" || eval echo \$${center_char_name})
        local horizontal_char=$([ "$border_style" == "filled" ] && echo "$fill_horizontal" || eval echo \$${horizontal_char_name})

        echo -n "$left_char"
        for ((i=0; i<column_count; i++)); do
            (( i > 0 )) && echo -n "$center_char"
            # Increase the width by 2 to account for the space between the border and the content
            local column_width=$((column_widths[i + OFFSET] + 2))
            echo -n "$(_repeat_char "$column_width" "$horizontal_char")"
        done
        echo -n "$right_char"
        echo ""
    }

    local char_vertical_name="_char_vertical_${border_style}"
    local char_vertical=$([ "$border_style" == "filled" ] && echo "$fill_vertical" || eval echo \$${char_vertical_name})

    print_separator "top" "$border_style" "$fill_horizontal" "$fill_vertical"
    local first_row=true
    for row in "${rows[@]}"; do
        [[ "$first_row" == true ]] && first_row=false || print_separator "center" "$border_style" "$fill_horizontal" "$fill_vertical"

        local columns=()
        _get_columns "$row" columns
        for ((i=0; i<column_count; i++)); do
            echo -n "$char_vertical"
            local index=$((i + OFFSET))
            local value="${columns[index]}"
            value=$(_clear_value "$value")
            local width="${column_widths[index]}"
            printf " %-${width}s " "$value"
        done
        echo -n "$char_vertical"
        echo ""
    done
    print_separator "bottom" "$border_style" "$fill_horizontal" "$fill_vertical"
}

_do_command() {
    if [ "$1" = "--help" ] || [ "$1" = "help" ]; then
        echo "$COMMAND_HELP"
        return
    fi

    local border_style="single"
    local fill_horizontal=''
    local fill_vertical=''
    local header_column=()
    while [ $# -gt 0 ]; do
        case "$1" in
            --single)
                border_style="single"
                ;;
            --double)
                border_style="double"
                ;;
            --rounded)
                border_style="rounded"
                ;;
            --bold)
                border_style="bold"
                ;;
            --middle)
                border_style="middle"
                ;;
            --filled=*)
                border_style="filled"
                local fill_symbols=$(echo "$1" | cut -d'=' -f2)
                fill_horizontal=$(echo "$fill_symbols" | cut -d',' -f1)
                fill_vertical=$(echo "$fill_symbols" | cut -d',' -f2)
                ;;
            *)
                header_column+=("$1")
                ;;
        esac
        shift
    done

    local column_count="${#column[@]}"
    local header=""
    if [ "$column_count" -eq 0 ]; then
        read -r first_line
        header="$first_line"
        column_count=$(echo "$first_line" | awk -F'\t' '{print NF}')
    else
        for col in "${header_column[@]}"; do
            [ -z "$header" ] || header+=$'\t'
            header+="$col"
        done
    fi

    print_table "$border_style" "$fill_horizontal" "$fill_vertical" "$header"
}

_do_command "$@"