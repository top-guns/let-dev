#!/bin/bash

COMMAND_DESCRIPTION="Parse JSON and extract values by path"

COMMAND_HELP="\
Parse JSON and extract values by path with JSON.sh.

Usage:
    :json:get [path]

Example:
    echo '[{"a": 1}, {"a": 2}]' | :json:get
    echo '{"a": {"b": 1}}' | :json:get a.b
    echo '{"a": [{"b": 1}, {"b": 2}]}' | :jso:get a[0].b
    echo '{"a": [1,2,3]}' | :json:get a[*]
    echo '{"a": {"arr": [1,2,3]}, "b": {"arr": [4,5]}}' | :json:get **.arr[0]
"


convert_standard_json_path_to_jsonsh_format() {
    local standard_path="$1"
    local jsonsh_path="["
    local component=""
    local length=${#standard_path}
    local i=0

    while [ $i -lt $length ]; do
        local char="${standard_path:$i:1}"

        if [[ "$char" == "." ]]; then
            # If current character is a '.', this marks the end of a property name
            if [[ -n "$component" ]]; then
                if [[ "$component" == "*" ]]; then
                    jsonsh_path+="*,"  # Use '*' to symbolize any element
                elif [[ "$component" == "**" ]]; then
                    jsonsh_path+="**,"  # Use '**' to symbolize all elements
                elif [[ "$component" =~ ^[0-9]+$ ]]; then
                    jsonsh_path+="$component,"
                else
                    jsonsh_path+="\"$component\","
                fi
                component=""
            fi
        elif [[ "$char" == "[" ]]; then
            # If current character is '[', then collect array index or '*'
            if [[ -n "$component" ]]; then
                jsonsh_path+="\"$component\","
                component=""
            fi
            local index=""
            ((i++))
            while [[ "${standard_path:$i:1}" != "]" && $i -lt $length ]]; do
                index+="${standard_path:$i:1}"
                ((i++))
            done
            if [[ "$index" == "*" ]]; then
                jsonsh_path+="*,"  # Use '*' to symbolize all elements
            else
                jsonsh_path+="$index,"
            fi
        else
            # Collect character as part of a property name or number
            component+="$char"
        fi
        ((i++))
    done

    # Final addition for the last component
    if [[ -n "$component" ]]; then
        if [[ "$component" == "*" ]]; then
            jsonsh_path+="*"
        elif [[ "$component" == "**" ]]; then
            jsonsh_path+="**,"  
        elif [[ "$component" =~ ^[0-9]+$ ]]; then
            jsonsh_path+="$component,"
        else
            jsonsh_path+="\"$component\","
        fi
    fi
    
    # Remove trailing comma and close the JSON.sh path format
    jsonsh_path="${jsonsh_path%,}]"

    echo "$jsonsh_path"
}

# Function to substitute newlines in string values within JSON
read_input_json_with_escaped_newlines() {
    local json_content
    json_content=$(cat) # Read entire input into a variable
    local in_string=false
    local prev_char=""

    local newline=$'\n'

    for (( i=0; i<${#json_content}; i++ )); do
        local current_char="${json_content:$i:1}"

        if [[ "$current_char" == "\"" && "$prev_char" != "\\" ]]; then
            # Toggle in_string flag when encountering a non-escaped quote
            [ $in_string == true ] && in_string=false || in_string=true
        fi

        if [[ "$current_char" == "$newline" ]]; then
            if [[ "$in_string" == true ]]; then
                # Replace real newlines with \n if inside a string
                printf '\\\\n'
            else
                # Output the current character immediately
                printf "%s" "$current_char"
            fi
        else
            # Output the current character immediately
            printf "%s" "$current_char"
        fi

        # Track previous character for escape detection
        prev_char="$current_char"
    done
}


_do_command() {
    # Show help on --help
    [[ "$1" == "--help" || "$1" == "help" ]] && echo "$COMMAND_HELP" && return

    local JSON_SH="$LETDEV_HOME/lib/JSON.sh/JSON.sh"

    # Save json from input stream to variable
    local json=$(read_input_json_with_escaped_newlines)

    # Path in style a.b.c
    local json_path="$1"

    if [[ -z "$json_path" ]]; then
        eval "$JSON_SH" <<< "$json"
        return
    fi

    local jsonsh_path=$(convert_standard_json_path_to_jsonsh_format "$json_path")

    local grep_filter=$(echo "$jsonsh_path" | sed \
        -e 's/,\*,/,[^,]+,/g' \
        -e 's/\[\*,/\[[^,]+,/' \
        -e 's/,\*\]/,[^,]+\]/' \
        -e 's/,\*\*,/,.+,/g' \
        -e 's/\[\*\*,/\[.+,/' \
        -e 's/,\*\*\]/,.+\]/' \
        -e 's/\[/\\\[/' \
        -e 's/\]/\\\]/'\
    )

    # echo "jsonsh_path: $jsonsh_path"
    # echo "grep_filter: $grep_filter"

    # Only the value from the second column is returned (after tab delim)
    # Remove the first and last double quotes from the value
    eval "$JSON_SH" <<< "$json" \
        | grep --color=never -E "$grep_filter" \
        | cut -f 2 \
        | sed -e '1s/^"//' -e '$s/"$//' -e 's/\\"/"/g'

}

_do_command $@
