#!/bin/bash

COMMAND_DESCRIPTION="Display internet speed"

COMMAND_HELP="\
Display speed of internet connection
Usage: 
    :net:speed
"

avg_sum=0

_do_ping() {
    local url="$1"
    local total_pings="$2"
    # local chars_per_ping="$3"

    # local bar=""
    for i in $(seq 1 $total_pings); do
        local ping_result="$(ping -c 2 "$url" 2>&1)"

        # Extract the average RTT from the RTT section
        local value_to_add=$(echo "$ping_result" | grep 'avg' | awk '{print $4}' | awk -F'/' '{print $2}')
        avg_sum=$(echo "$avg_sum + $value_to_add" | bc -l)
        
        # for j in $(seq 1 $chars_per_ping); do
        #     bar+="#"
        # done

        # echo -n "$bar"

        # local bar_len=${#bar}
        # local spaces=$((cols - 6 - bar_len))
        
        local percent=$(echo "$i * 100 / $total_pings" | bc -l)
        # format as 100.0%
        # printf "%${spaces}s%0.1f%%\r" "" $percent
        printf "%0.1f%%\r" $percent
    done

    # progress_width_int=$(printf "%.0f" $progress_width)
    # hashes=$(printf '%*s' "$((progress_width_int - 1))" | tr ' ' '#')
    # printf "%s %0.1f%%\r" "$hashes" $percent
}

_do_curl() {
    curl -# $@ 2>&1 | while IFS= read -r -n1 char; do 
        [[ ! "$char" =~ [#\ \r\n\f] ]] && echo -ne "$char"; 
    done
    echo -en "\r"
}

_do_curl_upload() {
    local output="$1"
    local url="$2"
    local done=false
    local last_chars="      "
    curl -# -X POST -F "file=@$output" "$url" 2>&1 | while IFS= read -r -n1 char; do 
        if [[ "$done" == false && ! "$char" =~ [#\ \r\n\f] ]]; then
            echo -ne "$char"

            last_chars="${last_chars:1}$char"
            [[ "$last_chars" == "100.0%" ]] && done=true && break
        fi
    done
    echo -en "\r"
}

_do_command() {
    # ------------------------------------------------------------------------------

    echo "1) Test round-trip time (with ping to google.com)  "

    # Pings count
    total_pings=4
    # Get terminal width
    # cols=$(tput cols)
    # Calculate available space for progress bar, subtracting space for percents and some padding
    # progress_width=$((cols - 6))
    # How many characters "=" on one ping
    # chars_per_ping=$((progress_width / total_pings))

    avg_sum=0
    _do_ping "google.com" $total_pings

    if [ $? -ne 0 ]; then
        echo "Failed to perform ping."
        return 1
    fi

    local avg_rtt=$(echo "$avg_sum / $total_pings" | bc -l)
    printf "    Average RTT: %.2f ms\n" $avg_rtt

    # ------------------------------------------------------------------------------

    echo "2) Test download speed (with curl to http://speedtest.ftp.otenet.gr)"

    # Test download speed using curl
    url="http://speedtest.ftp.otenet.gr/files/test100Mb.db"
    output=$(mktemp)

    start_time=$(date +%s.%N)
    _do_curl -o "$output" "$url"
    end_time=$(date +%s.%N)

    if [ $? -ne 0 ]; then
        echo "Failed to download the file."
        return 1
    fi

    # Calculate the elapsed time for the download
    elapsed=$(echo "$end_time - $start_time" | bc)
    
    # Get the file size in human-readable format
    # file_size=$(ls -lh "$output" | awk '{print $5}')
    file_size=$(ls -lh "$output" | awk '{print $5}' | sed 's/\([0-9]\)\([KMGTP]\)/\1 \2/')
    raw_file_size=$(wc -c <"$output")

    echo "    File size: $file_size"
    echo "    Download time: $elapsed s"
    
    download_speed=$(echo "scale=2; $raw_file_size / 1024 / 1024 / $elapsed" | bc -l)
    if [[ $download_speed == .* ]]; then
        download_speed="0$download_speed"
    fi

    echo "    Download speed: $download_speed Mb/s"

    # ------------------------------------------------------------------------------

    echo "3) Test upload speed (with curl to https://httpbin.org/post)..."

    url="https://httpbin.org/post"
    
    # Use the same file for upload test
    start_time=$(date +%s.%N)
    _do_curl_upload "$output" "$url"
    # curl --progress-bar -X POST -F "file=@$output" https://httpbin.org/post > /dev/null
    end_time=$(date +%s.%N)

    if [ $? -ne 0 ]; then
        echo "Failed to upload the file."
        return 1
    fi

    # Calculate the elapsed time for the upload
    elapsed=$(echo "$end_time - $start_time" | bc)
    
    echo "    File size: $file_size"
    echo "    Upload time: $elapsed s"
    
    upload_speed=$(echo "scale=2; $raw_file_size / 1024 / 1024 / $elapsed" | bc -l)
    if [[ $upload_speed == .* ]]; then
        upload_speed="0$upload_speed"
    fi

    echo "    Upload speed: $upload_speed Mb/s"

    # ------------------------------------------------------------------------------

    # Remove the temporary file
    rm "$output"
    return 0
}

_do_command "$@"
result=$?
if [ $result -ne 0 ]; then
    echo "Command failed with status $result"
fi