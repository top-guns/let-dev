#!/usr/bin/env bash

COMMAND_DESCRIPTION="Get container information"

COMMAND_HELP="\
Get information about a Docker container.

Usage:
    :docker:container:info [container_id | container_name]

    If container_id is not provided, it will ask for it.
"

MENU_FORMAT="\
ID: {{.ID}}
Name: {{.Name}}

Status: {{.State.Status}}
Created: {{.Created}}

Image: {{.Config.Image}}
Networks: {{range \$key, \$value := .NetworkSettings.Networks}}{{\$key}}{{end}}

IP: {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}
"

_select_container_name() {
    fzf \
        --reverse \
        --ansi \
        --height 40% \
        --prompt="Select a container: " \
        --preview="docker inspect --format '$MENU_FORMAT' {}" \
        < <(docker ps -a --format "{{.Names}}")
}


_do_command() {
    if [ "$1" = "--help" ] || [ "$1" = "help" ]; then
        echo "$COMMAND_HELP"
        return
    fi

    local container=$1
    [ -z "$container" ] && container=$(_select_container_name) || shift

    echo "General Information:"
    # {{\"\t\"}} {{\"\n\"}}
    docker inspect --format "  ID:       {{.ID}}" $container
    docker inspect --format "  Name:     {{.Name}}" $container
    docker inspect --format "  Image:    {{.Config.Image}}" $container
    echo ""

    echo "Status Information:"
    docker inspect --format "  Status:            {{.State.Status}}" $container
    docker inspect --format "  Created:           {{.Created}}" $container
    docker inspect --format "  Restart Policy:    {{.HostConfig.RestartPolicy.Name}}" $container
    echo ""

    echo "Command Information:"
    docker inspect --format "  Working Directory:    {{.Config.WorkingDir}}" $container
    docker inspect --format "  Command:              {{.Config.Cmd}}" $container
    echo ""

    echo "Network Information:"
    # docker inspect --format "Network ID: {{range .NetworkSettings.Networks}}{{.NetworkID}}{{end}}" $container
    # docker inspect --format "Network Name: {{range .NetworkSettings.Networks}}{{.Name}}{{end}}" $container
    # docker inspect --format "IP: {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $container
    # docker inspect --format 'Networks: {{range $key, $value := .NetworkSettings.Networks}}{{$key}} (ID: {{$value.NetworkID}}) {{end}}' $container
    docker inspect --format '  Networks:    {{range $key, $value := .NetworkSettings.Networks}}{{$key}}{{end}}' $container
    docker inspect --format "  IP:          {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}" $container
    docker inspect --format "  Hostname:    {{.Config.Hostname}}" $container
    echo ""

    echo "Container ports mapping:"
    docker inspect --format '{{range $key, $value := .NetworkSettings.Ports}}  {{$key}} -> host {{$value}}{{"\n"}}{{end}}' $container
    echo ""

    # # echo "ifconfig output"
    # # docker exec $container ifconfig
    # # echo ""

    echo "Volume mounts:"
    docker inspect --format '  Host path:       {{range .Mounts}}{{.Source}}{{"\n"}}  Container path:  {{.Destination}}{{"\n"}}{{"\n"}}{{end}}' $container
}

_do_command "$@"
