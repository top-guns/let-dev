#!/usr/bin/env bash

COMMAND_DESCRIPTION="Execute a command in a running container"

COMMAND_HELP="\
Execute a command in a running container.

Usage:
    :docker:container:exec [container_id | container_name] [command]

    If container_id is not provided, it will ask for it.
    If command is not provided, it will default to sh.

Example:
    :docker:container:exec 1234567890abcdef /bin/bash
    :docker:container:exec my-container ls -l
"

_select_container_name() {
    local format="\
ID:       {{.ID}}
Name:     {{.Name}}
Image:    {{.Config.Image}}

Status:   {{.State.Status}}
Created:  {{.Created}}
Restart:  {{.HostConfig.RestartPolicy.Name}}

IP:       {{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}
Hostname: {{.Config.Hostname}}

Command:  {{.Config.Cmd}}
"

    fzf \
        --reverse \
        --ansi \
        --height 40% \
        --prompt="Select a container: " \
        --preview="docker inspect --format '$format' {}" \
        < <(docker ps -a --format "{{.Names}}")
}

_do_command() {
    if [ "$1" = "--help" ] || [ "$1" = "help" ]; then
        echo "$COMMAND_HELP"
        return
    fi

    local container=$1
    shift
    local command="$@"

    [ -z "$container" ] && container=$(_select_container_name)

    if [ -z "$(docker ps -a -q -f name=$container)" ] && [ -z "$(docker ps -a -q -f id=$container)" ]; then
        [ -n "$command" ] && command="$container $command" || command="$container"
        container=$(_select_container_name)
    fi

    # Check that the container is running
    if [ -z "$(docker ps -q -f name=$container)" ] && [ -z "$(docker ps -q -f id=$container)" ]; then
        echo "Container $container is not running."
        return
    fi

    [ -z "$command" ] && command="sh"

    docker exec -it "$container" "$command"
}

_do_command "$@"
