#!/bin/bash

# Edit a file

_confirm() {
    read -p "$1 (y/n) " -n 1 -r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        return 0
    else
        return 1
    fi
}

_select_editor() {
  local prompt="$1"

  local editors=()
  command -v "micro" &>/dev/null && editors+=("micro")
  command -v "nano" &>/dev/null && editors+=("nano")
  command -v "mcedit" &>/dev/null && editors+=("mcedit")
  command -v "code" &>/dev/null && editors+=("code")
  command -v "vim" &>/dev/null && editors+=("vim")
  command -v "subl" &>/dev/null && editors+=("subl")
  command -v "atom" &>/dev/null && editors+=("atom")
  command -v "gedit" &>/dev/null && editors+=("gedit")
  command -v "kate" &>/dev/null && editors+=("kate")
  command -v "mousepad" &>/dev/null && editors+=("mousepad")
  command -v "pluma" &>/dev/null && editors+=("pluma")
  command -v "geany" &>/dev/null && editors+=("geany")
  command -v "bluefish" &>/dev/null && editors+=("bluefish")
  command -v "leafpad" &>/dev/null && editors+=("leafpad")
  command -v "juffed" &>/dev/null && editors+=("juffed")
  command -v "jedit" &>/dev/null && editors+=("jedit")
  command -v "kwrite" &>/dev/null && editors+=("kwrite")

  # If fzf is installed, use it to select the editor
  if command -v "fzf" &>/dev/null; then
    # echo "${editors[@]}" | tr ' ' '\n' | fzf --prompt="$prompt" #--preview="echo {}" --preview-window=up:1:wrap
    echo "${editors[@]}" | tr ' ' '\n' | fzf --height 30% --reverse --prompt="$prompt"
    return
  fi

  # If fzf is not installed, use the default select
  echo "$prompt"
  select editor in "${editors[@]}"; do
    if [[ " ${editors[@]} " =~ " ${editor} " ]]; then
      echo $editor
      break
    fi
  done
}

_install() {
  # Check the operating system
  if [[ "$OSTYPE" == "linux-gnu"* ]]; then
    # Check if micro is installed
    if ! command -v micro &> /dev/null; then
      # Install micro using the package manager
      sudo apt install micro
      echo "Micro installed successfully"
    else
      echo "Micro is already installed"
    fi
  elif [[ "$OSTYPE" == "darwin"* ]]; then
    # Check if brew is installed
    if ! command -v brew &> /dev/null; then
      echo "Homebrew is not installed. Please install Homebrew before running this script."
      return
    fi

    # Check if micro is installed
    if ! command -v micro &> /dev/null; then
      # Install micro using the package manager
      brew install micro
      echo "Micro installed successfully"
    else
      echo "Micro is already installed"
    fi
  else
    echo "Unsupported operating system"
    return
  fi
}

_do_command() {
  # Show help on --help
  if [[ "$#" -eq 0 || "$1" == "--help" ]]; then
    echo "Edit the contents of a file"
    echo "Usage:"
    echo "  : :edit <file>"
    return
  fi

  if [[ "$1" == "--install" ]]; then
    _install
    return
  fi

  local cmd="$EDITOR"
  # local cmd=""
  local file="$1"

  if ! command -v "$cmd" &>/dev/null; then
    # Ask for the editor to use
    if [ -z "$cmd" ]; then
      echo "Default editor is not specified (\$EDITOR environment variable is not set)"
    else
      echo "Default editor ('$cmd' from the \$EDITOR environment variable) was not found"
    fi

    # Check if micro is installed
    echo "If you don't have a preferred editor, we recommend using Micro. It has color syntax highlighting, mouse support and familiar keyboard shortcuts."
    if ! command -v micro &> /dev/null; then
      echo "Micro is not installed. You can use ': :edit --install' command to install it."
    fi

    cmd=$(_select_editor "Select an editor to use:")
  fi

  # If the file does not exist, ask for user to creating a new file
  if [[ ! -f "$file" ]]; then
    echo "File '$file' not found, creating a new file"
    if _confirm "Do you want to create a new file '$file'?"; then
        touch $file
    else
        return
    fi
  fi

  $cmd $file
}

_do_command $@
